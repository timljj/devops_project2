'''This file runs the image captioning app.
'''

import requests
from PIL import Image
from flask import Flask, request, render_template, flash, redirect, url_for
from flask.logging import create_logger
from transformers import BlipProcessor, BlipForConditionalGeneration


app = Flask(__name__)
LOG = create_logger(app)

app.config['SECRET_KEY'] = '3f651974d8272f5f35717559f41023c8a567f70c34ea3568'

# device = "cuda" if torch.cuda.is_available() else "cpu"


processor = BlipProcessor.from_pretrained("Salesforce/blip-image-captioning-base")
model = BlipForConditionalGeneration.from_pretrained("Salesforce/blip-image-captioning-base")

# img_url = 'https://storage.googleapis.com/sfr-vision-language-research/BLIP/demo.jpg'

def open_image_from_url(img_url):
    """Open Image from URL.

    Args:
        img_url (string): URL of the image.

    Returns:
        PIL.Image.Image: The image grabbed from the URL.
    """
    raw_image = Image.open(requests.get(img_url, stream=True).raw).convert('RGB')
    return raw_image

def process_image(raw_image, text='A picture of'):
    """Use BLIP Processor to process image.

    Args:
        raw_image (PIL.Image.Image): The image grabbed from the URL.
        text (str, optional): The conditional image captioning prompt. Defaults to 'A picture of'.

    Returns:
        BatchEncoding: The encoded image.
    """
    # conditional image captioning
    inputs = processor(raw_image, text, return_tensors="pt")
    return inputs

def get_caption(inputs):
    """Get the caption generated by the image captioning model.

    Args:
        inputs (BatchEncoding): The encoded input.

    Returns:
        str: The generated caption.
    """
    out = model.generate(**inputs)
    caption = processor.decode(out[0], skip_special_tokens=True)
    caption = caption[0].upper() + caption[1:]
    return caption

@app.route('/')
def home(): # pylint: disable=missing-function-docstring
    return render_template('index.html')

@app.route('/caption_from_file', methods=['POST'])
def caption_from_file(): # pylint: disable=missing-function-docstring
    return render_template('caption_from_file.html')

@app.route('/caption_from_url', methods=['GET', 'POST'])
def caption_from_url(): # pylint: disable=missing-function-docstring
    if request.method == 'POST':
        img_url = request.form['url']
        LOG.info("Image URL: %s", img_url)
        if not img_url:
            flash("Image URL is Required!")
            return redirect(url_for('caption_from_url'))
        raw_image = open_image_from_url(str(img_url))
        processed_img = process_image(raw_image)
        caption = get_caption(processed_img)
        LOG.info("Caption: %s", caption)

        # need to send list of dictionary
        return render_template(
            'caption_from_url.html', context=[{'caption': caption, 'img_url': img_url}]
        )
    return render_template('caption_from_url.html')

if __name__ == '__main__':
    app.run()
